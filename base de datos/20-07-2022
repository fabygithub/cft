#1089 - Parte de la clave es erronea. 
Una parte de la clave no es una cadena o la longitud 
usada es tan grande como la parte de la clave

es porque la clave tabla pelicula todavia no esta creada




new database fabian_cornejo 

inventario 
phpmyadmin clave foranea
crear la tablas sin la clave foranea

codigoInven int 11  primary
codigoPelicula int 11 index fkcodigoPelicula 11
cantidad int 11
valorArriendo int 11



CREATE TABLE `fabian_cornejo`.`inventario` 
(`codigoInven` INT(11) NOT NULL , 
`cantidad` INT(11) NOT NULL , 
`valorArriendo` INT(11) NOT NULL , 
`valorVenta` INT(11) NOT NULL , 
PRIMARY KEY (`codigoInven`(11))) ENGINE = InnoDB;


CREATE TABLE `fabian_cornejo`.`pelicula` 
(`codigoPelicula` INT(11) NOT NULL , 
`titulo` VARCHAR(50) NOT NULL , 
`duracion` VARCHAR(10) NOT NULL , 
`descripcion` LONGTEXT NOT NULL , 
PRIMARY KEY (`codigoPelicula`)) ENGINE = InnoDB;


en la primary key se deja vacio la columna

inventario estructura 
agregar una columna

agregar foranea
el mismo nombre de la primary
de la otra tabla

en indice elegir
unique sin nombre


agregar clave foranea

ALTER TABLE `inventario` ADD `codigoPelicula` INT NOT NULL AFTER `valorVenta`, ADD UNIQUE (`codigoPelicula`);

seleccionar la base de datos
ir a rutinas

agregar rutina
nombre rutina consultar_tablas

tipo : procedure

en in nombrar cualquier columna
tipo
longitud

CREATE PROCEDURE `consultar_tablas`(IN `cantidad` INT(11)) 
NOT DETERMINISTIC CONTAINS SQL SQL SECURITY 
DEFINER SELECT * from inventario;

rutina ejecutar

SET @p0='10'; CALL `consultar_tablas`(@p0);

insertar cualquer numero para que funciones el procedimiento

se pueden agregar mas parametros
con agregar parametro


INSERT INTO `inventario`
(`codigoInven`, `cantidad`, `valorArriendo`, `valorVenta`, `codigoPelicula`) 
VALUES ('[value-1]','[value-2]','[value-3]','[value-4]','[value-5]')

describir la tabla

codigoInven
int(11)
NO
PRI
NULL
cantidad
int(11)
NO
NULL
valorArriendo
int(11)
NO
NULL
valorVenta
int(11)
NO
NULL
codigoPelicula
int(11)
NO
UNI
NULL


CREATE PROCEDURE `insertar_tupla`
(IN `codigoInven` INT(11), 
IN `cantidad` INT(11), 
IN `valorArriendo` INT(11), 
IN `valorVenta` INT(11), 
IN `codigoPelicula` INT(11)) 
NOT DETERMINISTIC CONTAINS 
SQL SQL SECURITY DEFINER 
INSERT INTO `inventario` 
(`codigoInven`, `cantidad`, `valorArriendo`, `valorVenta`, `codigoPelicula`) 
VALUES ('[value-1]','[value-2]','[value-3]','[value-4]','[value-5]')



INSERT INTO `inventario`
(codigoInven, cantidad, valorArriendo, valorVenta) 
VALUES (codigoInven,cantidad,valorArriendo,valorVenta)

se escriben 2 veces la misma columna para agregar el procedimiento



CREATE PROCEDURE `insertar_tupla`
(IN `codigoInven` INT(11), 
IN `cantidad` INT(11), 
IN `valorArriendo` 
INT(11), IN `valorVenta` 
INT(11)) NOT DETERMINISTIC CONTAINS 
SQL SQL SECURITY DEFINER 
INSERT INTO `inventario` (`codigoInven`, `cantidad`, `valorArriendo`, `valorVenta`) 
VALUES ('codigoInven','cantidad','valorArriendo','valorVenta')



procedimiento insertar

SET @p0='10'; SET @p1='100'; SET @p2='10000'; SET @p3='400'; CALL `insertar_tupla`(@p0, @p1, @p2, @p3);


DROP PROCEDURE `insertar_tupla`; CREATE DEFINER=`root`@`localhost` PROCEDURE `insertar_tupla`(IN `codigoInven` INT(11), IN `cantidad` INT(11), IN `valorArriendo` INT(11), IN `valorVenta` INT(11)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER INSERT INTO `inventario` (`codigoInven`, `cantidad`, `valorArriendo`, `valorVenta`) VALUES (codigoInven,cantidad,valorArriendo,valorVenta)



agregar rutina 

tipo 
funcion

MySQL MAX() Function - W3Schools


nombre max_inventario
tipo function
parametros cantidad 11
SELECT MAX(cantidad) AS max_inventario FROM inventario;

la sentencia debe contener un return
primero hay que declarar un numero

declare numero int;

BEGIN
DECLARE numero int;
SELECT MAX(cantidad) INTO numero FROM inventario;
return numero;
END


CREATE FUNCTION `max_inventario`
(`cantidad` INT(11)) RETURNS INT(11) 
NOT DETERMINISTIC CONTAINS SQL SQL SECURITY 
DEFINER 
BEGIN 
DECLARE numero int; 
SELECT MAX(cantidad) 
INTO numero FROM inventario; 
return numero; 
END

select max mysql routine

DROP FUNCTION `max_inventario`; CREATE DEFINER=`root`@`localhost` FUNCTION `max_inventario`(`cantidad` INT(11)) RETURNS INT(11) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER BEGIN DECLARE numero int; SELECT MAX(cantidad) into numero FROM inventario; return max(cantidad); END


mysql stored function

BEGIN
  RETURN 3*3;
END

mysql stored function return select result

sin parametros

BEGIN
  DECLARE numero int; 
  SELECT max(cantidad)into numero FROM inventario;
  RETURN numero;
END


UPDATE `inventario` SET `cantidad`=cantidad WHERE cantidad = 10

CREATE PROCEDURE `actualizar_inventario`(IN `cantidad` INT(11)) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER UPDATE `inventario` SET `cantidad`=cantidad WHERE cantidad = 10


stored procedure mysql update example

How can I create a stored procedure to update values in a MySQL table?


How to Show a List of All Databases in MySQL
show databases in cmd

mysql -u user -p

mysql -u user -p
Copy
If you havenâ€™t set a password for your MySQL user you can omit the -p switch.

cmd mostrar bases de datos

root
SHOW DATABASES;

SHOW PROCEDURE STATUS;


mysql procedimientos almacenados

CREATE TABLE productos (
    id INT NOT NULL AUTO_INCREMENT,
    nombre VARCHAR(20) NOT NULL,
    estado VARCHAR(20) NOT NULL DEFAULT 'disponible',
    precio FLOAT NOT NULL DEFAULT 0.0,
    PRIMARY KEY(id)
);


DELIMITER $$
CREATE PROCEDURE obtenerProductosPorEstado(IN nombre_estado VARCHAR(255))
BEGIN
    SELECT * 
    FROM productos
    WHERE estado = nombre_estado;
END$$
DELIMITER

se elimina el delimiter de abajo


nombre_estado = es una variable que se crea

DELIMITER $$
CREATE PROCEDURE obtenerProductosPorEstado(IN nombre_estado VARCHAR(255))
BEGIN
    SELECT * 
    FROM productos
    WHERE estado = nombre_estado;
END$$

seleccionar los productos disponibles

CALL obtenerProductosPorEstado('disponible')

la variable estado es una columna de la tabla productos


DELIMITER $$
CREATE PROCEDURE contarProductosPorEstado(
    IN nombre_estado VARCHAR(25),
    OUT numero INT)
BEGIN
    SELECT count (id) 
    INTO numero
    FROM productos
    WHERE estado = nombre_estado;
END$$
DELIMITER


se crea la variables in nombre_estado para ingresar un estado disponible o agotado
out numero int es una variable creada que nos sirve para contar

CALL contarProductosPorEstado('disponible', @numero);


#1630 - FUNCTION fabian_cornejo.count does not exist. Check the 'Function Name Parsing and Resolution' section in the Reference Manual


COUNT (`ID`)
To:

COUNT(`ID`)

CALL contarProductosPorEstado('disponible', @numero);
SELECT @numero AS disponibles;

select @ = se tiene que seleccionar @numero pa ver el resultado


DELIMITER $$
CREATE PROCEDURE sumarProductosPorEstado(
    IN nombre_estado VARCHAR(25),
    OUT numero INT)
BEGIN
    SELECT sum(id) 
    INTO numero
    FROM productos
    WHERE estado = nombre_estado;
END$$


CALL contarProductosPorEstado('disponible', @numero);
SELECT @numero AS suma;




























